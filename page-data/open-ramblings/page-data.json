{"componentChunkName":"component---src-templates-blog-post-js","path":"/open-ramblings/","result":{"data":{"site":{"siteMetadata":{"title":"Dave Campion"}},"markdownRemark":{"id":"23403523-1fe7-5a04-831a-5579f214adbd","excerpt":"effectsjs, programming language research and what next. A new blog, a new year. A little over a year ago algebraic effects were hot. It was probably Dan Abramov…","html":"<h2>effectsjs, programming language research and what next.</h2>\n<h3>A new blog, a new year.</h3>\n<p>A little over a year ago algebraic effects were <em>hot</em>.</p>\n<p>It was probably Dan Abramov’s article<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> that first caught my\neye, followed shortly by Sam Galton’s article <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>. Yassine Elouafi’s\nseries <sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup> was another great source of inspiration.</p>\n<p>All the while, Algebraic Effects had also been growing\nquite popular on the <a href=\"https://www.reddit.com/r/ProgrammingLanguages/\">r/ProgrammingLanguages</a> subreddit.\nThere week or so where I would read a comment referencing them pretty much daily. The people on <code class=\"language-text\">r/ProgrammingLanguages</code>\nare truly awesome. It is hands down one of the best communities on reddit. I was introduced to\n<a href=\"https://www.eff-lang.org/\">eff-lang</a> through the community. I started hacking in Scheme.</p>\n<h3>Digressing, Generators and Control Flow</h3>\n<p>Completely unrelated, I’d also been really into generators around\nthat time. This interest had been sparked from two different sources: the\nwonderful <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html\">standard library abstractions</a> that Rust provides, and a\nrediscovery of Kris Kowal’s GTOR <sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup>. Specifically, I intrigued by the usefulness\ngenerators provide to asynchronous abstractions.</p>\n<p>In general, I wanted to understand problems related to asynchronous control flow more completely.\nThere was something that just didn’t feel right about the ECMAScript <code class=\"language-text\">async/await</code> specification.\nI was unhappy with the way functions composed , and reflecting on several of the codebases that I’d been working on.\nReasoning about async code is a big pain point that I’ve observed in the wild. Smart people get it wrong and experienced\ndevs can get tripped up.</p>\n<p>We’ve seen a few incarnations\nof async control flow, and subsequent best practices.\nECMAThe need for some kind of sugar to write asynchronous code in a\ndirect-style is very real. The introduction of\n<a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:generators\">ES6 Harmony Generator Specification</a>\nspawned several projects to take advantage of the power generators unlocked (co\n<sup id=\"fnref-5\"><a href=\"#fn-5\" class=\"footnote-ref\">5</a></sup> and <sup id=\"fnref-6\"><a href=\"#fn-6\" class=\"footnote-ref\">6</a></sup> suspend for a few). We don’t talk about generators that much as a community anymore,\nbut I find them fascinating and woefully underused. They are arguably the most powerful primitive\nintroduced to the language.</p>\n<p>There are some open questions that I have, in relation to the async idioms and data structures we\nhave in JS. I think that we deserve something better than <code class=\"language-text\">async/await</code> for writing direct-style asynchronous code.\nThere are better options, but can we ever have them in ECMAScript.</p>\n<p>This question is still on my mind. I <em>suspect</em> that we could have something better.</p>\n<h3>effectsjs</h3>\n<p>Shortly after reading Sam Galton’s article, I was fully on board with algebraic\neffects and wanted them in ECMAScript. I knew that there was overall two\nmajor approaches to creating an effects system in JS: <code class=\"language-text\">throw/catch</code>\nsemantics, and generators. After reading a few papers, the\n<code class=\"language-text\">throw/catch</code> approach seemed inadequate due to that high level of abuse\nrequired for hijacking the call stack. Generators seemed much more\nappealing. My gut told me the transforms for generators would be more natural and more appropriate given that they exist\nto suspend and resume stackframes. I’m still confident that generators are the correct\nchoice for building an effects system in javascript.</p>\n<h3>Programming Language Theory</h3>\n<p>I’ve always <em>flirted</em> with programming language design, but never really committed. Programming language\n<em>research</em> really hadn’t been on my radar up until this point. At the time I probably would’ve explained it\naway as an esoteric academic pursuit. I never really considered it relevant to other things that I enjoyed.</p>\n<p>However, I decided that I wanted to build an effects system and draft ECMAScript specification to provide some sugar for\nthe mess of generator code that I was sure would follow. I had this general\ninclination that being able to write non-color-changing direct-style\nasynchronous programming, would be a game-changer. But in order\nto test that hypothesis, I’d need to be able to write some code. And in order to\ndo that, I’d need to draft a specification and write some\ntransformations to a modified Babel fork.</p>\n<p>Thus, <a href=\"https://github.com/effectsjs/effectsjs\">effectsjs</a> was born and I\naccidentally stumbled into doing amateur programming language research.</p>\n<h3>Project woes</h3>\n<p>The biggest challenge presented itself with\n<a href=\"https://github.com/effectsjs/effectsjs/issues/19\">this issue</a>. It is the first\nindication I think that something wasn’t quite right with the first iteration of\nthe project. The short of it is that for something written in continuation\npassing style (CPS for short), the continuation getting passed <em>can not</em> not\nperform without some state and being converted into a Promise. This problem is far-reaching.</p>\n<p>It of course has nothing to with functional interfaces, but with preserving the\ncorrect context as control is ceded to the callee such that the virtual stack\nremains whole. At it’s heart, this is a conflict of two different control-flow\nstyles. Further exacerbating the issue is that CPS-style code expects\n<em>continuations</em>, not generators or promises. You can’t just perform willy-nilly and\nexpect seamless interop with other librarys.</p>\n<p><a href=\"https://github.com/effectsjs/effectsjs/pull/33\">So EffectsBoundary was introduced</a>\nto sort of patch over these problems. However, the boundary solve never really\nsat well with me. It’s not very elegant, requires too much buy-in and syntax\nto do normal things. Worst of all, it requires the consumer to be acutely aware\nof the effects-system. Effects are no longer this wonderful sugary prose that\nallow you to isolate dependencies and mutations in a meaningful way. Instead,\nthe <code class=\"language-text\">perform</code> keyword becomes a burden. One must apply mental gymnastics in\norder to use it correctly. “Do I need to use an <code class=\"language-text\">EffectsBoundary</code> here?”, “Where\nis the virtual stack right now?” and so on…</p>\n<p>Having said all of that, the effects boundary was not all bad. It actually solved the problem in a\nmeaningful way in the short term. It would’ve been totally possible to go on\nexperimenting with the <code class=\"language-text\">EffectsBoundary</code> in place. But it’s not good enough, and\nit killed my interest in the project for a while.</p>\n<h3>Interests at large</h3>\n<p>2020 has been a hard year for a lot of people. I wasn’t an exception in this category,\nthough I do feel fortunate to have come out on the other end relatively\nunscathed. In the last week or so in doing some reflecting on where life has\ntaken me so far, and where I would like to see it go— the one thing I regret is\nnot writing more.</p>\n<p>I learned a great many things over the last year. Interests around PL theory\nhave really gelled. Had I been writing about all of the info I soaked up along\nthe way, about the Category Theory, Algebraic Data Structures, realizations and discoveries made around\n<code class=\"language-text\">effectsjs</code>, I’d be much farther along.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://overreacted.io/algebraic-effects-for-the-rest-of-us\">Algebraic Effects for the Rest of Us</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p><a href=\"https://medium.com/yld-blog/continuations-coroutines-fibers-effects-e163dda9dedc\">Continuations Coroutines Fibers Effects</a></p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p><a href=\"https://dev.to/yelouafi/algebraic-effects-in-javascript-part-1---continuations-and-control-transfer-3g88\">Algebraic Effects in Javascript</a></p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-4\">\n<p><a href=\"https://github.com/kriskowal/gtor\">General Theory of Reactivity</a></p>\n<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-5\">\n<p><a href=\"https://github.com/tj/co\">co</a></p>\n<a href=\"#fnref-5\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-6\">\n<p><a href=\"https://github.com/jmar777/suspend\">suspend</a></p>\n<a href=\"#fnref-6\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"Ramblings for the New Year","date":"January 04, 2021","description":""}}},"pageContext":{"slug":"/open-ramblings/","previous":null,"next":{"fields":{"slug":"/javascript/"},"frontmatter":{"title":"A Sound Type System for Javascript"}}}},"staticQueryHashes":["2104522371","3000541721"]}